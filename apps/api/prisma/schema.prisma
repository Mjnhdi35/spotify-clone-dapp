// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
 
enum NFTStatus {
  PUBLIC
  PRIVATE
}

enum MarketStatus {
  SELLING
  SOLD
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RoyaltyStatus {
  PENDING
  PAID
  FAILED
}

model User {
  id            String    @id @unique
  walletAddress String    @unique
  email         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  buyer  Buyer?
  seller Seller?
}

model Buyer {
  id            String        @id @unique
  balance       Decimal       @default(0)
  rewards       Decimal       @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user          User          @relation(fields: [id], references: [id])
  playHistories PlayHistory[]
  rewardsList   Reward[]
  purchases     Transaction[] @relation("BuyerTransactions")
}

model Seller {
  id         String        @id @unique
  balance    Decimal       @default(0)
  totalSales Decimal       @default(0)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  user     User        @relation(fields: [id], references: [id])
  songNFTs SongNFT[]
  sales    Transaction[] @relation("SellerTransactions")
}

model Artist {
  id            Int             @id @default(autoincrement())
  name          String
  bio           String?
  walletAddress String          @unique
  totalEarnings Decimal         @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  songNFTs  SongNFT[]
  royalties ArtistRoyalty[]
}

model SongNFT {
  id                String          @id @unique
  title             String
  duration          Int
  poster            String?
  marketStatus      MarketStatus    @default(SELLING)
  status            NFTStatus       @default(PUBLIC)
  royaltyPercentage Decimal         @default(0.1)
  price             Decimal
  releaseDate       DateTime?
  nftAddress        String          @unique
  musicUrl          String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  artistId      Int             
  artist        Artist          @relation(fields: [artistId], references: [id])
  sellerId      String          
  seller        Seller          @relation(fields: [sellerId], references: [id])

  transactions  Transaction[]
  royalties     ArtistRoyalty[]
  playHistories PlayHistory[]
  rewards       Reward[]
}

model Transaction {
  id              Int               @id @default(autoincrement())
  txHash          String            @unique
  amount          Decimal
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  blockNumber     Int?
  gasUsed         Decimal?
  contractAddress String?

  nftId         String          
  nft           SongNFT         @relation(fields: [nftId], references: [id])

  buyerId       String          
  buyer         Buyer           @relation("BuyerTransactions", fields: [buyerId], references: [id])

  sellerId      String          
  seller        Seller          @relation("SellerTransactions", fields: [sellerId], references: [id])

  royalties     ArtistRoyalty[]
}

model ArtistRoyalty {
  id            Int           @id @default(autoincrement())
  amount        Decimal
  status        RoyaltyStatus @default(PENDING)
  paymentTxHash String?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())

  artistId      Int           
  artist        Artist        @relation(fields: [artistId], references: [id])
  transactionId Int           
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  nftId         String        
  nft           SongNFT       @relation(fields: [nftId], references: [id])

  @@index([status])
  @@index([artistId])
  @@index([transactionId])
}

model PlayHistory {
  id             Int      @id @default(autoincrement())
  durationPlayed Int
  playedAt       DateTime @default(now())

  buyerId String 
  buyer   Buyer  @relation(fields: [buyerId], references: [id])
  nftId   String 
  nft     SongNFT @relation(fields: [nftId], references: [id])
}

model Reward {
  id        Int     @id @default(autoincrement())
  amount    Decimal
  claimed   Boolean @default(false)
  createdAt DateTime @default(now())

  buyerId String 
  buyer   Buyer  @relation(fields: [buyerId], references: [id])
  nftId   String 
  nft     SongNFT @relation(fields: [nftId], references: [id])
}